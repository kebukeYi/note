# 03 \u7ED1\u5B9A\u8868\u573A\u666F
spring.shardingsphere.datasource.names=m1

# \u540C\u4E00\u4E2A\u6570\u636E\u5E93
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/coursedb?characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

# t_dict \u8868
spring.shardingsphere.sharding.tables.t_dict.actual-data-nodes=m1.t_dict_$->{1..2}
# \u4E3B\u952E
spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_dict.key-generator.props.worker.id=1
# \u5206\u7247\u952E
spring.shardingsphere.sharding.tables.t_dict.table-strategy.inline.sharding-column=ustatus
#\u5206\u7247\u7B97\u6CD5
spring.shardingsphere.sharding.tables.t_dict.table-strategy.inline.algorithm-expression=t_dict_$->{ustatus.toInteger()%2+1}

# \u5F15\u5165\u53E6\u5916\u7684  t_user \u8868
spring.shardingsphere.sharding.tables.user.actual-data-nodes=m1.t_user_$->{1..2}
# \u4E3B\u952E
spring.shardingsphere.sharding.tables.user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.user.key-generator.props.worker.id=1
# \u5206\u7247\u952E
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=ustatus
#\u5206\u7247\u7B97\u6CD5
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=t_user_$->{ustatus.toInteger()%2+1}

#\u7ED1\u5B9A\u8868\u793A\u4F8B
# user,t_dict \u5BF9\u5E94\u7684\u662F\u903B\u8F91\u8868\u4E4B\u95F4\u7684\u5173\u7CFB
spring.shardingsphere.sharding.binding-tables[0]=user,t_dict

spring.shardingsphere.props.sql.show = true
spring.main.allow-bean-definition-overriding=true

